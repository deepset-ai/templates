# A document search pipeline that combines a dense (embedding-based) Retriever with a keyword-based Retriever (Elasticsearch's BM25)
version: '1.3.0'
name: 'HybridDocSearch'

# This section defines nodes that we want to use in our pipelines
components:
  - name: DocumentStore
    type: DeepsetCloudDocumentStore #the only supported document store in deepset Cloud
  - name: ESRetriever # the keyword-based retriever
    type: ElasticsearchRetriever
    params:
      document_store: DocumentStore
      top_k: 20 #the number of results to return
  - name: EmbeddingRetriever # the dense retriever
    type: EmbeddingRetriever
    params:
      document_store: DocumentStore
      embedding_model: sentence-transformers/multi-qa-mpnet-base-dot-v1 #model optimized for semantic search
      model_format: sentence_transformers
      top_k: 20 #the number of results to return
  - name: JoinResults #joins the results from both retrievers
    type: JoinDocuments
    params:
      join_mode: reciprocal_rank_fusion #applies rank-based scoring to the results
  - name: FileTypeClassifier #routes files based on their extension to appropriate converters, useful if you have different file types
    type: FileTypeClassifier
  - name: TextConverter #converts files into documents
    type: TextConverter
  - name: PDFConverter #converts PDFs into documents
    type: PDFToTextConverter
  - name: Preprocessor #splits documents into smaller ones and cleans them up
    type: PreProcessor
    params:
      #With a dense retriever, it's good to split your documents into smaller ones
      split_by: word #the unit by which you want to split the documents
      split_length: 250 #the max number of words in a document
      split_overlap: 30 #enables the sliding window approach
      split_respect_sentence_boundary: True #retains complete sentences in split documents

# Here you define how the nodes are organized in the pipelines
# For each node, specify its input
pipelines:
  - name: query
    nodes:
      - name: ESRetriever
        inputs: [Query]
      - name: EmbeddingRetriever
        inputs: [Query]
      - name: JoinResults
        inputs: [ESRetriever, EmbeddingRetriever]
  - name: indexing
    nodes:
      # Depending on the file type, we use a Text or PDF converter
      - name: FileTypeClassifier
        inputs: [File]
      - name: TextConverter
        inputs: [FileTypeClassifier.output_1] #ensures that this converter gets txt files
      - name: PDFConverter
        inputs: [FileTypeClassifier.output_2] #ensures that this converter gets pdf files
      - name: Preprocessor
        inputs: [TextConverter, PDFConverter]
      - name: EmbeddingRetriever
        inputs: [Preprocessor]
      - name: DocumentStore
        inputs: [EmbeddingRetriever]